generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model store {
  id   String @id @default(uuid())
  name String
  userId String
  billboards billboard[] @relation("storeToBillboard")
  categories category[] @relation("CategoryToStore")
  sizes size[] @relation("SizeToStore")
  colors color[] @relation("ColorToStore")
  products Product[] @relation("productToStore")
  orders Order[] @relation("OrderToStore")

  createdAt DateTime @default(now())
  updated DateTime @updatedAt
}

model billboard {
  id String @id @default(uuid())
  storeId String
  store store @relation("storeToBillboard", fields:[storeId], references : [id])
  categories category[] @relation("CategoryToBillboard")
  label String
  imgUrl String
  createdAt DateTime @default(now())
  updated DateTime @updatedAt

  @@index([storeId])
}

model category {
  id String @id @default(uuid())
  storeId String
  store store @relation("CategoryToStore", fields:[storeId], references : [id])
  billboardId String
  billboard billboard @relation("CategoryToBillboard", fields:[billboardId], references : [id])
  products Product[] @relation("productToCategory")
  name String
  createdAt DateTime @default(now())
  updated DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model size {
  id String @id @default(uuid())
  storeId String
  store store @relation("SizeToStore", fields:[storeId], references : [id])
  products Product[] @relation("productToSize")
  name String
  value String
  createdAt DateTime @default(now())
  updated DateTime @updatedAt

  @@index([storeId])
}

model color {
  id String @id @default(uuid())
  storeId String
  store store @relation("ColorToStore", fields:[storeId], references : [id])
  products Product[] @relation("productToColor")
  name String
  value String
  createdAt DateTime @default(now())
  updated DateTime @updatedAt

  @@index([storeId])
}

model Product {
  id String @id @default(uuid())
  storeId String
  store store @relation("productToStore", fields:[storeId], references : [id])
  categoryId String
  category category @relation("productToCategory", fields:[categoryId], references : [id])
  sizeId String
  size size @relation("productToSize", fields:[sizeId], references : [id])
  colorId String
  color color @relation("productToColor", fields:[colorId], references : [id])
  orderItems OrderItem[]
  name String
  price Decimal
  isFeatured Boolean @default(true)
  isArchived Boolean @default(false)
  images Image[] @relation("ImageToProduct")
  createdAt DateTime @default(now())
  updated DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id String @id @default(uuid())
  productId String
  product Product @relation("ImageToProduct", fields: [productId], references: [id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updated DateTime @updatedAt

  @@index([productId])
}

model Order {
  id String @id @default(uuid())
  storeId String
  store store @relation("OrderToStore", fields: [storeId], references: [id])
  orderItems  OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updated DateTime @updatedAt

  @@index([storeId])
}

model OrderItem {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])
  quantity Int @default(1)
  @@index([orderId])
  @@index([productId])
}